// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import {
    MyUser,
    LoginResponse,
    RegisterResponse,
    ForgotPasswordResponse,
    Error,
    VoidResponse,
    Context,
} from '../tstypes/index'
import {
    Notification,
    Comment,
    User,
    File,
    Team,
    Channel,
    Message,
    Rating,
} from './prisma-client/index'

export type UserRole = 'ADMIN' | 'MODERATOR' | 'USER'
export type NotificationOrderByInput =
    | 'id_ASC'
    | 'id_DESC'
    | 'message_ASC'
    | 'message_DESC'
    | 'createdAt_ASC'
    | 'createdAt_DESC'
    | 'updatedAt_ASC'
    | 'updatedAt_DESC'
export type CommentOrderByInput =
    | 'id_ASC'
    | 'id_DESC'
    | 'body_ASC'
    | 'body_DESC'
    | 'parentId_ASC'
    | 'parentId_DESC'
    | 'pageId_ASC'
    | 'pageId_DESC'
    | 'createdAt_ASC'
    | 'createdAt_DESC'
    | 'updatedAt_ASC'
    | 'updatedAt_DESC'
export type UserOrderByInput =
    | 'id_ASC'
    | 'id_DESC'
    | 'email_ASC'
    | 'email_DESC'
    | 'set_private_ASC'
    | 'set_private_DESC'
    | 'username_ASC'
    | 'username_DESC'
    | 'password_ASC'
    | 'password_DESC'
    | 'gitHubId_ASC'
    | 'gitHubId_DESC'
    | 'facebookId_ASC'
    | 'facebookId_DESC'
    | 'twitterId_ASC'
    | 'twitterId_DESC'
    | 'gmailId_ASC'
    | 'gmailId_DESC'
    | 'private_ASC'
    | 'private_DESC'
    | 'confirmed_ASC'
    | 'confirmed_DESC'
    | 'online_ASC'
    | 'online_DESC'
    | 'createdAt_ASC'
    | 'createdAt_DESC'
    | 'updatedAt_ASC'
    | 'updatedAt_DESC'
    | 'role_ASC'
    | 'role_DESC'
export type TeamOrderByInput =
    | 'id_ASC'
    | 'id_DESC'
    | 'name_ASC'
    | 'name_DESC'
    | 'slug_ASC'
    | 'slug_DESC'
    | 'createdAt_ASC'
    | 'createdAt_DESC'
    | 'updatedAt_ASC'
    | 'updatedAt_DESC'
    | 'confirmed_ASC'
    | 'confirmed_DESC'
    | 'online_ASC'
    | 'online_DESC'
export type ChannelOrderByInput =
    | 'id_ASC'
    | 'id_DESC'
    | 'name_ASC'
    | 'name_DESC'
    | 'slug_ASC'
    | 'slug_DESC'
    | 'public_ASC'
    | 'public_DESC'
    | 'teamId_ASC'
    | 'teamId_DESC'
    | 'createdAt_ASC'
    | 'createdAt_DESC'
    | 'updatedAt_ASC'
    | 'updatedAt_DESC'
export type MessageOrderByInput =
    | 'id_ASC'
    | 'id_DESC'
    | 'body_ASC'
    | 'body_DESC'
    | 'parentId_ASC'
    | 'parentId_DESC'
    | 'url_ASC'
    | 'url_DESC'
    | 'filetype_ASC'
    | 'filetype_DESC'
    | 'createdAt_ASC'
    | 'createdAt_DESC'
    | 'updatedAt_ASC'
    | 'updatedAt_DESC'

export namespace QueryResolvers {
    export const defaultResolvers = {}

    export type CurrentUserResolver =
        | ((
              parent: undefined,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => MyUser | null | Promise<MyUser | null>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => MyUser | null | Promise<MyUser | null>
          }

    export type QueryUsersResolver =
        | ((
              parent: undefined,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => MyUser[] | null | Promise<MyUser[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => MyUser[] | null | Promise<MyUser[] | null>
          }

    export interface Type {
        currentUser:
            | ((
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => MyUser | null | Promise<MyUser | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => MyUser | null | Promise<MyUser | null>
              }

        queryUsers:
            | ((
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => MyUser[] | null | Promise<MyUser[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => MyUser[] | null | Promise<MyUser[] | null>
              }
    }
}

export namespace MyUserResolvers {
    export const defaultResolvers = {
        id: (parent: MyUser) => parent.id,
        email: (parent: MyUser) => parent.email,
        set_private: (parent: MyUser) => parent.set_private,
        username: (parent: MyUser) => parent.username,
        gitHubId: (parent: MyUser) =>
            parent.gitHubId === undefined ? null : parent.gitHubId,
        facebookId: (parent: MyUser) =>
            parent.facebookId === undefined ? null : parent.facebookId,
        twitterId: (parent: MyUser) =>
            parent.twitterId === undefined ? null : parent.twitterId,
        gmailId: (parent: MyUser) =>
            parent.gmailId === undefined ? null : parent.gmailId,
        private: (parent: MyUser) => parent.private,
        confirmed: (parent: MyUser) => parent.confirmed,
        online: (parent: MyUser) => parent.online,
        createdAt: (parent: MyUser) => parent.createdAt,
        updatedAt: (parent: MyUser) => parent.updatedAt,
    }

    export type IdResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type EmailResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type NotificationsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Notification[] | null | Promise<Notification[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Notification[] | null | Promise<Notification[] | null>
          }

    export type Set_privateResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type UsernameResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type GitHubIdResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type FacebookIdResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type TwitterIdResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type GmailIdResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type DirectMessagesResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Comment[] | null | Promise<Comment[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment[] | null | Promise<Comment[] | null>
          }

    export type Avatar_urlResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => File | Promise<File>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => File | Promise<File>
          }

    export type PrivateResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type BlockedUsersResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type ConfirmedResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type OnlineResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type FriendsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type Friend_requestsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type CreatedAtResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type RoleResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => UserRole | Promise<UserRole>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => UserRole | Promise<UserRole>
          }

    export type TeamsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Team[] | null | Promise<Team[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>
          }

    export type ChannelsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Channel[] | null | Promise<Channel[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>
          }

    export type Owned_teamsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Team[] | null | Promise<Team[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>
          }

    export type Owned_channelsResolver =
        | ((
              parent: MyUser,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Channel[] | null | Promise<Channel[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>
          }

    export interface Type {
        id:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        email:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        notifications:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Notification[] | null | Promise<Notification[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Notification[] | null | Promise<Notification[] | null>
              }

        set_private:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        username:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        gitHubId:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        facebookId:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        twitterId:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        gmailId:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        directMessages:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment[] | null | Promise<Comment[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Comment[] | null | Promise<Comment[] | null>
              }

        avatar_url:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => File | Promise<File>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => File | Promise<File>
              }

        private:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        blockedUsers:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        confirmed:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        online:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        friends:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        friend_requests:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        createdAt:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        role:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => UserRole | Promise<UserRole>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => UserRole | Promise<UserRole>
              }

        teams:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Team[] | null | Promise<Team[] | null>
              }

        channels:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Channel[] | null | Promise<Channel[] | null>
              }

        owned_teams:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Team[] | null | Promise<Team[] | null>
              }

        owned_channels:
            | ((
                  parent: MyUser,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: MyUser,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Channel[] | null | Promise<Channel[] | null>
              }
    }
}

export namespace NotificationResolvers {
    export const defaultResolvers = {
        id: (parent: Notification) => parent.id,
        message: (parent: Notification) =>
            parent.message === undefined ? null : parent.message,
    }

    export type IdResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type MessageResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type CommentsResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Comment | null | Promise<Comment | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment | null | Promise<Comment | null>
          }

    export type MessagesResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Message | null | Promise<Message | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Message | null | Promise<Message | null>
          }

    export type TeamResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Team | null | Promise<Team | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team | null | Promise<Team | null>
          }

    export type ChannelResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Channel | null | Promise<Channel | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel | null | Promise<Channel | null>
          }

    export type Friend_requestsResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>
          }

    export type FriendResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>
          }

    export type AuthorResolver =
        | ((
              parent: Notification,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | Promise<User>)
        | {
              fragment: string
              resolve: (
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>
          }

    export interface Type {
        id:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        message:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        comments:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment | null | Promise<Comment | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Comment | null | Promise<Comment | null>
              }

        messages:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Message | null | Promise<Message | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Message | null | Promise<Message | null>
              }

        team:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team | null | Promise<Team | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Team | null | Promise<Team | null>
              }

        channel:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel | null | Promise<Channel | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Channel | null | Promise<Channel | null>
              }

        friend_requests:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | null | Promise<User | null>
              }

        friend:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | null | Promise<User | null>
              }

        author:
            | ((
                  parent: Notification,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>)
            | {
                  fragment: string
                  resolve: (
                      parent: Notification,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | Promise<User>
              }
    }
}

export namespace CommentResolvers {
    export const defaultResolvers = {
        id: (parent: Comment) => parent.id,
        body: (parent: Comment) => parent.body,
        parentId: (parent: Comment) => parent.parentId,
        pageId: (parent: Comment) => parent.pageId,
        createdAt: (parent: Comment) => parent.createdAt,
        updatedAt: (parent: Comment) => parent.updatedAt,
    }

    export interface CommentWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        pageId?: string | null
        pageId_not?: string | null
        pageId_in?: string[] | null
        pageId_not_in?: string[] | null
        pageId_lt?: string | null
        pageId_lte?: string | null
        pageId_gt?: string | null
        pageId_gte?: string | null
        pageId_contains?: string | null
        pageId_not_contains?: string | null
        pageId_starts_with?: string | null
        pageId_not_starts_with?: string | null
        pageId_ends_with?: string | null
        pageId_not_ends_with?: string | null
        repliedTo?: UserWhereInput | null
        ratings?: RatingWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        replies_every?: CommentWhereInput | null
        replies_some?: CommentWhereInput | null
        replies_none?: CommentWhereInput | null
        author?: UserWhereInput | null
        AND?: CommentWhereInput[] | null
        OR?: CommentWhereInput[] | null
        NOT?: CommentWhereInput[] | null
    }
    export interface UserWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        email?: string | null
        email_not?: string | null
        email_in?: string[] | null
        email_not_in?: string[] | null
        email_lt?: string | null
        email_lte?: string | null
        email_gt?: string | null
        email_gte?: string | null
        email_contains?: string | null
        email_not_contains?: string | null
        email_starts_with?: string | null
        email_not_starts_with?: string | null
        email_ends_with?: string | null
        email_not_ends_with?: string | null
        notifications_every?: NotificationWhereInput | null
        notifications_some?: NotificationWhereInput | null
        notifications_none?: NotificationWhereInput | null
        set_private?: boolean | null
        set_private_not?: boolean | null
        username?: string | null
        username_not?: string | null
        username_in?: string[] | null
        username_not_in?: string[] | null
        username_lt?: string | null
        username_lte?: string | null
        username_gt?: string | null
        username_gte?: string | null
        username_contains?: string | null
        username_not_contains?: string | null
        username_starts_with?: string | null
        username_not_starts_with?: string | null
        username_ends_with?: string | null
        username_not_ends_with?: string | null
        password?: string | null
        password_not?: string | null
        password_in?: string[] | null
        password_not_in?: string[] | null
        password_lt?: string | null
        password_lte?: string | null
        password_gt?: string | null
        password_gte?: string | null
        password_contains?: string | null
        password_not_contains?: string | null
        password_starts_with?: string | null
        password_not_starts_with?: string | null
        password_ends_with?: string | null
        password_not_ends_with?: string | null
        gitHubId?: string | null
        gitHubId_not?: string | null
        gitHubId_in?: string[] | null
        gitHubId_not_in?: string[] | null
        gitHubId_lt?: string | null
        gitHubId_lte?: string | null
        gitHubId_gt?: string | null
        gitHubId_gte?: string | null
        gitHubId_contains?: string | null
        gitHubId_not_contains?: string | null
        gitHubId_starts_with?: string | null
        gitHubId_not_starts_with?: string | null
        gitHubId_ends_with?: string | null
        gitHubId_not_ends_with?: string | null
        facebookId?: string | null
        facebookId_not?: string | null
        facebookId_in?: string[] | null
        facebookId_not_in?: string[] | null
        facebookId_lt?: string | null
        facebookId_lte?: string | null
        facebookId_gt?: string | null
        facebookId_gte?: string | null
        facebookId_contains?: string | null
        facebookId_not_contains?: string | null
        facebookId_starts_with?: string | null
        facebookId_not_starts_with?: string | null
        facebookId_ends_with?: string | null
        facebookId_not_ends_with?: string | null
        twitterId?: string | null
        twitterId_not?: string | null
        twitterId_in?: string[] | null
        twitterId_not_in?: string[] | null
        twitterId_lt?: string | null
        twitterId_lte?: string | null
        twitterId_gt?: string | null
        twitterId_gte?: string | null
        twitterId_contains?: string | null
        twitterId_not_contains?: string | null
        twitterId_starts_with?: string | null
        twitterId_not_starts_with?: string | null
        twitterId_ends_with?: string | null
        twitterId_not_ends_with?: string | null
        gmailId?: string | null
        gmailId_not?: string | null
        gmailId_in?: string[] | null
        gmailId_not_in?: string[] | null
        gmailId_lt?: string | null
        gmailId_lte?: string | null
        gmailId_gt?: string | null
        gmailId_gte?: string | null
        gmailId_contains?: string | null
        gmailId_not_contains?: string | null
        gmailId_starts_with?: string | null
        gmailId_not_starts_with?: string | null
        gmailId_ends_with?: string | null
        gmailId_not_ends_with?: string | null
        directMessages_every?: CommentWhereInput | null
        directMessages_some?: CommentWhereInput | null
        directMessages_none?: CommentWhereInput | null
        avatar_url?: FileWhereInput | null
        private?: boolean | null
        private_not?: boolean | null
        blockedUsers_every?: UserWhereInput | null
        blockedUsers_some?: UserWhereInput | null
        blockedUsers_none?: UserWhereInput | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        friends_every?: UserWhereInput | null
        friends_some?: UserWhereInput | null
        friends_none?: UserWhereInput | null
        friend_requests_every?: UserWhereInput | null
        friend_requests_some?: UserWhereInput | null
        friend_requests_none?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        role?: UserRole | null
        role_not?: UserRole | null
        role_in?: UserRole[] | null
        role_not_in?: UserRole[] | null
        teams_every?: TeamWhereInput | null
        teams_some?: TeamWhereInput | null
        teams_none?: TeamWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        owned_teams_every?: TeamWhereInput | null
        owned_teams_some?: TeamWhereInput | null
        owned_teams_none?: TeamWhereInput | null
        owned_channels_every?: ChannelWhereInput | null
        owned_channels_some?: ChannelWhereInput | null
        owned_channels_none?: ChannelWhereInput | null
        AND?: UserWhereInput[] | null
        OR?: UserWhereInput[] | null
        NOT?: UserWhereInput[] | null
    }
    export interface RatingWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        vote?: number | null
        vote_not?: number | null
        vote_in?: number[] | null
        vote_not_in?: number[] | null
        vote_lt?: number | null
        vote_lte?: number | null
        vote_gt?: number | null
        vote_gte?: number | null
        author_every?: UserWhereInput | null
        author_some?: UserWhereInput | null
        author_none?: UserWhereInput | null
        AND?: RatingWhereInput[] | null
        OR?: RatingWhereInput[] | null
        NOT?: RatingWhereInput[] | null
    }
    export interface NotificationWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        message?: string | null
        message_not?: string | null
        message_in?: string[] | null
        message_not_in?: string[] | null
        message_lt?: string | null
        message_lte?: string | null
        message_gt?: string | null
        message_gte?: string | null
        message_contains?: string | null
        message_not_contains?: string | null
        message_starts_with?: string | null
        message_not_starts_with?: string | null
        message_ends_with?: string | null
        message_not_ends_with?: string | null
        comments?: CommentWhereInput | null
        messages?: MessageWhereInput | null
        team?: TeamWhereInput | null
        channel?: ChannelWhereInput | null
        friend_requests?: UserWhereInput | null
        friend?: UserWhereInput | null
        author?: UserWhereInput | null
        AND?: NotificationWhereInput[] | null
        OR?: NotificationWhereInput[] | null
        NOT?: NotificationWhereInput[] | null
    }
    export interface FileWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        filename?: string | null
        filename_not?: string | null
        filename_in?: string[] | null
        filename_not_in?: string[] | null
        filename_lt?: string | null
        filename_lte?: string | null
        filename_gt?: string | null
        filename_gte?: string | null
        filename_contains?: string | null
        filename_not_contains?: string | null
        filename_starts_with?: string | null
        filename_not_starts_with?: string | null
        filename_ends_with?: string | null
        filename_not_ends_with?: string | null
        mimetype?: string | null
        mimetype_not?: string | null
        mimetype_in?: string[] | null
        mimetype_not_in?: string[] | null
        mimetype_lt?: string | null
        mimetype_lte?: string | null
        mimetype_gt?: string | null
        mimetype_gte?: string | null
        mimetype_contains?: string | null
        mimetype_not_contains?: string | null
        mimetype_starts_with?: string | null
        mimetype_not_starts_with?: string | null
        mimetype_ends_with?: string | null
        mimetype_not_ends_with?: string | null
        encoding?: string | null
        encoding_not?: string | null
        encoding_in?: string[] | null
        encoding_not_in?: string[] | null
        encoding_lt?: string | null
        encoding_lte?: string | null
        encoding_gt?: string | null
        encoding_gte?: string | null
        encoding_contains?: string | null
        encoding_not_contains?: string | null
        encoding_starts_with?: string | null
        encoding_not_starts_with?: string | null
        encoding_ends_with?: string | null
        encoding_not_ends_with?: string | null
        key?: string | null
        key_not?: string | null
        key_in?: string[] | null
        key_not_in?: string[] | null
        key_lt?: string | null
        key_lte?: string | null
        key_gt?: string | null
        key_gte?: string | null
        key_contains?: string | null
        key_not_contains?: string | null
        key_starts_with?: string | null
        key_not_starts_with?: string | null
        key_ends_with?: string | null
        key_not_ends_with?: string | null
        ETag?: string | null
        ETag_not?: string | null
        ETag_in?: string[] | null
        ETag_not_in?: string[] | null
        ETag_lt?: string | null
        ETag_lte?: string | null
        ETag_gt?: string | null
        ETag_gte?: string | null
        ETag_contains?: string | null
        ETag_not_contains?: string | null
        ETag_starts_with?: string | null
        ETag_not_starts_with?: string | null
        ETag_ends_with?: string | null
        ETag_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        AND?: FileWhereInput[] | null
        OR?: FileWhereInput[] | null
        NOT?: FileWhereInput[] | null
    }
    export interface TeamWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        author?: UserWhereInput | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        AND?: TeamWhereInput[] | null
        OR?: TeamWhereInput[] | null
        NOT?: TeamWhereInput[] | null
    }
    export interface ChannelWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        public?: boolean | null
        public_not?: boolean | null
        messages_every?: MessageWhereInput | null
        messages_some?: MessageWhereInput | null
        messages_none?: MessageWhereInput | null
        teamId?: string | null
        teamId_not?: string | null
        teamId_in?: string[] | null
        teamId_not_in?: string[] | null
        teamId_lt?: string | null
        teamId_lte?: string | null
        teamId_gt?: string | null
        teamId_gte?: string | null
        teamId_contains?: string | null
        teamId_not_contains?: string | null
        teamId_starts_with?: string | null
        teamId_not_starts_with?: string | null
        teamId_ends_with?: string | null
        teamId_not_ends_with?: string | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: ChannelWhereInput[] | null
        OR?: ChannelWhereInput[] | null
        NOT?: ChannelWhereInput[] | null
    }
    export interface MessageWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        filetype?: string | null
        filetype_not?: string | null
        filetype_in?: string[] | null
        filetype_not_in?: string[] | null
        filetype_lt?: string | null
        filetype_lte?: string | null
        filetype_gt?: string | null
        filetype_gte?: string | null
        filetype_contains?: string | null
        filetype_not_contains?: string | null
        filetype_starts_with?: string | null
        filetype_not_starts_with?: string | null
        filetype_ends_with?: string | null
        filetype_not_ends_with?: string | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: MessageWhereInput[] | null
        OR?: MessageWhereInput[] | null
        NOT?: MessageWhereInput[] | null
    }

    export interface ArgsReplies {
        where?: CommentWhereInput | null
        orderBy?: CommentOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export type IdResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type BodyResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type ParentIdResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type PageIdResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type RepliedToResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>
          }

    export type RatingsResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Rating | Promise<Rating>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Rating | Promise<Rating>
          }

    export type CreatedAtResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type RepliesResolver =
        | ((
              parent: Comment,
              args: ArgsReplies,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Comment[] | null | Promise<Comment[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: ArgsReplies,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment[] | null | Promise<Comment[] | null>
          }

    export type AuthorResolver =
        | ((
              parent: Comment,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | Promise<User>)
        | {
              fragment: string
              resolve: (
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>
          }

    export interface Type {
        id:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        body:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        parentId:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        pageId:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        repliedTo:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | null | Promise<User | null>
              }

        ratings:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Rating | Promise<Rating>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Rating | Promise<Rating>
              }

        createdAt:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        replies:
            | ((
                  parent: Comment,
                  args: ArgsReplies,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment[] | null | Promise<Comment[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: ArgsReplies,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Comment[] | null | Promise<Comment[] | null>
              }

        author:
            | ((
                  parent: Comment,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>)
            | {
                  fragment: string
                  resolve: (
                      parent: Comment,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | Promise<User>
              }
    }
}

export namespace UserResolvers {
    export const defaultResolvers = {
        id: (parent: User) => parent.id,
        email: (parent: User) =>
            parent.email === undefined ? null : parent.email,
        set_private: (parent: User) => parent.set_private,
        username: (parent: User) => parent.username,
        password: (parent: User) => parent.password,
        gitHubId: (parent: User) =>
            parent.gitHubId === undefined ? null : parent.gitHubId,
        facebookId: (parent: User) =>
            parent.facebookId === undefined ? null : parent.facebookId,
        twitterId: (parent: User) =>
            parent.twitterId === undefined ? null : parent.twitterId,
        gmailId: (parent: User) =>
            parent.gmailId === undefined ? null : parent.gmailId,
        private: (parent: User) => parent.private,
        confirmed: (parent: User) => parent.confirmed,
        online: (parent: User) => parent.online,
        createdAt: (parent: User) => parent.createdAt,
        updatedAt: (parent: User) => parent.updatedAt,
        role: (parent: User) => parent.role,
    }

    export interface NotificationWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        message?: string | null
        message_not?: string | null
        message_in?: string[] | null
        message_not_in?: string[] | null
        message_lt?: string | null
        message_lte?: string | null
        message_gt?: string | null
        message_gte?: string | null
        message_contains?: string | null
        message_not_contains?: string | null
        message_starts_with?: string | null
        message_not_starts_with?: string | null
        message_ends_with?: string | null
        message_not_ends_with?: string | null
        comments?: CommentWhereInput | null
        messages?: MessageWhereInput | null
        team?: TeamWhereInput | null
        channel?: ChannelWhereInput | null
        friend_requests?: UserWhereInput | null
        friend?: UserWhereInput | null
        author?: UserWhereInput | null
        AND?: NotificationWhereInput[] | null
        OR?: NotificationWhereInput[] | null
        NOT?: NotificationWhereInput[] | null
    }
    export interface CommentWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        pageId?: string | null
        pageId_not?: string | null
        pageId_in?: string[] | null
        pageId_not_in?: string[] | null
        pageId_lt?: string | null
        pageId_lte?: string | null
        pageId_gt?: string | null
        pageId_gte?: string | null
        pageId_contains?: string | null
        pageId_not_contains?: string | null
        pageId_starts_with?: string | null
        pageId_not_starts_with?: string | null
        pageId_ends_with?: string | null
        pageId_not_ends_with?: string | null
        repliedTo?: UserWhereInput | null
        ratings?: RatingWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        replies_every?: CommentWhereInput | null
        replies_some?: CommentWhereInput | null
        replies_none?: CommentWhereInput | null
        author?: UserWhereInput | null
        AND?: CommentWhereInput[] | null
        OR?: CommentWhereInput[] | null
        NOT?: CommentWhereInput[] | null
    }
    export interface UserWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        email?: string | null
        email_not?: string | null
        email_in?: string[] | null
        email_not_in?: string[] | null
        email_lt?: string | null
        email_lte?: string | null
        email_gt?: string | null
        email_gte?: string | null
        email_contains?: string | null
        email_not_contains?: string | null
        email_starts_with?: string | null
        email_not_starts_with?: string | null
        email_ends_with?: string | null
        email_not_ends_with?: string | null
        notifications_every?: NotificationWhereInput | null
        notifications_some?: NotificationWhereInput | null
        notifications_none?: NotificationWhereInput | null
        set_private?: boolean | null
        set_private_not?: boolean | null
        username?: string | null
        username_not?: string | null
        username_in?: string[] | null
        username_not_in?: string[] | null
        username_lt?: string | null
        username_lte?: string | null
        username_gt?: string | null
        username_gte?: string | null
        username_contains?: string | null
        username_not_contains?: string | null
        username_starts_with?: string | null
        username_not_starts_with?: string | null
        username_ends_with?: string | null
        username_not_ends_with?: string | null
        password?: string | null
        password_not?: string | null
        password_in?: string[] | null
        password_not_in?: string[] | null
        password_lt?: string | null
        password_lte?: string | null
        password_gt?: string | null
        password_gte?: string | null
        password_contains?: string | null
        password_not_contains?: string | null
        password_starts_with?: string | null
        password_not_starts_with?: string | null
        password_ends_with?: string | null
        password_not_ends_with?: string | null
        gitHubId?: string | null
        gitHubId_not?: string | null
        gitHubId_in?: string[] | null
        gitHubId_not_in?: string[] | null
        gitHubId_lt?: string | null
        gitHubId_lte?: string | null
        gitHubId_gt?: string | null
        gitHubId_gte?: string | null
        gitHubId_contains?: string | null
        gitHubId_not_contains?: string | null
        gitHubId_starts_with?: string | null
        gitHubId_not_starts_with?: string | null
        gitHubId_ends_with?: string | null
        gitHubId_not_ends_with?: string | null
        facebookId?: string | null
        facebookId_not?: string | null
        facebookId_in?: string[] | null
        facebookId_not_in?: string[] | null
        facebookId_lt?: string | null
        facebookId_lte?: string | null
        facebookId_gt?: string | null
        facebookId_gte?: string | null
        facebookId_contains?: string | null
        facebookId_not_contains?: string | null
        facebookId_starts_with?: string | null
        facebookId_not_starts_with?: string | null
        facebookId_ends_with?: string | null
        facebookId_not_ends_with?: string | null
        twitterId?: string | null
        twitterId_not?: string | null
        twitterId_in?: string[] | null
        twitterId_not_in?: string[] | null
        twitterId_lt?: string | null
        twitterId_lte?: string | null
        twitterId_gt?: string | null
        twitterId_gte?: string | null
        twitterId_contains?: string | null
        twitterId_not_contains?: string | null
        twitterId_starts_with?: string | null
        twitterId_not_starts_with?: string | null
        twitterId_ends_with?: string | null
        twitterId_not_ends_with?: string | null
        gmailId?: string | null
        gmailId_not?: string | null
        gmailId_in?: string[] | null
        gmailId_not_in?: string[] | null
        gmailId_lt?: string | null
        gmailId_lte?: string | null
        gmailId_gt?: string | null
        gmailId_gte?: string | null
        gmailId_contains?: string | null
        gmailId_not_contains?: string | null
        gmailId_starts_with?: string | null
        gmailId_not_starts_with?: string | null
        gmailId_ends_with?: string | null
        gmailId_not_ends_with?: string | null
        directMessages_every?: CommentWhereInput | null
        directMessages_some?: CommentWhereInput | null
        directMessages_none?: CommentWhereInput | null
        avatar_url?: FileWhereInput | null
        private?: boolean | null
        private_not?: boolean | null
        blockedUsers_every?: UserWhereInput | null
        blockedUsers_some?: UserWhereInput | null
        blockedUsers_none?: UserWhereInput | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        friends_every?: UserWhereInput | null
        friends_some?: UserWhereInput | null
        friends_none?: UserWhereInput | null
        friend_requests_every?: UserWhereInput | null
        friend_requests_some?: UserWhereInput | null
        friend_requests_none?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        role?: UserRole | null
        role_not?: UserRole | null
        role_in?: UserRole[] | null
        role_not_in?: UserRole[] | null
        teams_every?: TeamWhereInput | null
        teams_some?: TeamWhereInput | null
        teams_none?: TeamWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        owned_teams_every?: TeamWhereInput | null
        owned_teams_some?: TeamWhereInput | null
        owned_teams_none?: TeamWhereInput | null
        owned_channels_every?: ChannelWhereInput | null
        owned_channels_some?: ChannelWhereInput | null
        owned_channels_none?: ChannelWhereInput | null
        AND?: UserWhereInput[] | null
        OR?: UserWhereInput[] | null
        NOT?: UserWhereInput[] | null
    }
    export interface TeamWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        author?: UserWhereInput | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        AND?: TeamWhereInput[] | null
        OR?: TeamWhereInput[] | null
        NOT?: TeamWhereInput[] | null
    }
    export interface ChannelWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        public?: boolean | null
        public_not?: boolean | null
        messages_every?: MessageWhereInput | null
        messages_some?: MessageWhereInput | null
        messages_none?: MessageWhereInput | null
        teamId?: string | null
        teamId_not?: string | null
        teamId_in?: string[] | null
        teamId_not_in?: string[] | null
        teamId_lt?: string | null
        teamId_lte?: string | null
        teamId_gt?: string | null
        teamId_gte?: string | null
        teamId_contains?: string | null
        teamId_not_contains?: string | null
        teamId_starts_with?: string | null
        teamId_not_starts_with?: string | null
        teamId_ends_with?: string | null
        teamId_not_ends_with?: string | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: ChannelWhereInput[] | null
        OR?: ChannelWhereInput[] | null
        NOT?: ChannelWhereInput[] | null
    }
    export interface MessageWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        filetype?: string | null
        filetype_not?: string | null
        filetype_in?: string[] | null
        filetype_not_in?: string[] | null
        filetype_lt?: string | null
        filetype_lte?: string | null
        filetype_gt?: string | null
        filetype_gte?: string | null
        filetype_contains?: string | null
        filetype_not_contains?: string | null
        filetype_starts_with?: string | null
        filetype_not_starts_with?: string | null
        filetype_ends_with?: string | null
        filetype_not_ends_with?: string | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: MessageWhereInput[] | null
        OR?: MessageWhereInput[] | null
        NOT?: MessageWhereInput[] | null
    }
    export interface RatingWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        vote?: number | null
        vote_not?: number | null
        vote_in?: number[] | null
        vote_not_in?: number[] | null
        vote_lt?: number | null
        vote_lte?: number | null
        vote_gt?: number | null
        vote_gte?: number | null
        author_every?: UserWhereInput | null
        author_some?: UserWhereInput | null
        author_none?: UserWhereInput | null
        AND?: RatingWhereInput[] | null
        OR?: RatingWhereInput[] | null
        NOT?: RatingWhereInput[] | null
    }
    export interface FileWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        filename?: string | null
        filename_not?: string | null
        filename_in?: string[] | null
        filename_not_in?: string[] | null
        filename_lt?: string | null
        filename_lte?: string | null
        filename_gt?: string | null
        filename_gte?: string | null
        filename_contains?: string | null
        filename_not_contains?: string | null
        filename_starts_with?: string | null
        filename_not_starts_with?: string | null
        filename_ends_with?: string | null
        filename_not_ends_with?: string | null
        mimetype?: string | null
        mimetype_not?: string | null
        mimetype_in?: string[] | null
        mimetype_not_in?: string[] | null
        mimetype_lt?: string | null
        mimetype_lte?: string | null
        mimetype_gt?: string | null
        mimetype_gte?: string | null
        mimetype_contains?: string | null
        mimetype_not_contains?: string | null
        mimetype_starts_with?: string | null
        mimetype_not_starts_with?: string | null
        mimetype_ends_with?: string | null
        mimetype_not_ends_with?: string | null
        encoding?: string | null
        encoding_not?: string | null
        encoding_in?: string[] | null
        encoding_not_in?: string[] | null
        encoding_lt?: string | null
        encoding_lte?: string | null
        encoding_gt?: string | null
        encoding_gte?: string | null
        encoding_contains?: string | null
        encoding_not_contains?: string | null
        encoding_starts_with?: string | null
        encoding_not_starts_with?: string | null
        encoding_ends_with?: string | null
        encoding_not_ends_with?: string | null
        key?: string | null
        key_not?: string | null
        key_in?: string[] | null
        key_not_in?: string[] | null
        key_lt?: string | null
        key_lte?: string | null
        key_gt?: string | null
        key_gte?: string | null
        key_contains?: string | null
        key_not_contains?: string | null
        key_starts_with?: string | null
        key_not_starts_with?: string | null
        key_ends_with?: string | null
        key_not_ends_with?: string | null
        ETag?: string | null
        ETag_not?: string | null
        ETag_in?: string[] | null
        ETag_not_in?: string[] | null
        ETag_lt?: string | null
        ETag_lte?: string | null
        ETag_gt?: string | null
        ETag_gte?: string | null
        ETag_contains?: string | null
        ETag_not_contains?: string | null
        ETag_starts_with?: string | null
        ETag_not_starts_with?: string | null
        ETag_ends_with?: string | null
        ETag_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        AND?: FileWhereInput[] | null
        OR?: FileWhereInput[] | null
        NOT?: FileWhereInput[] | null
    }

    export interface ArgsNotifications {
        where?: NotificationWhereInput | null
        orderBy?: NotificationOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsDirectMessages {
        where?: CommentWhereInput | null
        orderBy?: CommentOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsBlockedUsers {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsFriends {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsFriend_requests {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsTeams {
        where?: TeamWhereInput | null
        orderBy?: TeamOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsChannels {
        where?: ChannelWhereInput | null
        orderBy?: ChannelOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsOwned_teams {
        where?: TeamWhereInput | null
        orderBy?: TeamOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsOwned_channels {
        where?: ChannelWhereInput | null
        orderBy?: ChannelOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export type IdResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type EmailResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type NotificationsResolver =
        | ((
              parent: User,
              args: ArgsNotifications,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Notification[] | null | Promise<Notification[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsNotifications,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Notification[] | null | Promise<Notification[] | null>
          }

    export type Set_privateResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type UsernameResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type PasswordResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type GitHubIdResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type FacebookIdResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type TwitterIdResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type GmailIdResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type DirectMessagesResolver =
        | ((
              parent: User,
              args: ArgsDirectMessages,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Comment[] | null | Promise<Comment[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsDirectMessages,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment[] | null | Promise<Comment[] | null>
          }

    export type Avatar_urlResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => File | Promise<File>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => File | Promise<File>
          }

    export type PrivateResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type BlockedUsersResolver =
        | ((
              parent: User,
              args: ArgsBlockedUsers,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsBlockedUsers,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type ConfirmedResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type OnlineResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type FriendsResolver =
        | ((
              parent: User,
              args: ArgsFriends,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsFriends,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type Friend_requestsResolver =
        | ((
              parent: User,
              args: ArgsFriend_requests,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsFriend_requests,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type CreatedAtResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type RoleResolver =
        | ((
              parent: User,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => UserRole | Promise<UserRole>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => UserRole | Promise<UserRole>
          }

    export type TeamsResolver =
        | ((
              parent: User,
              args: ArgsTeams,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Team[] | null | Promise<Team[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsTeams,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>
          }

    export type ChannelsResolver =
        | ((
              parent: User,
              args: ArgsChannels,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Channel[] | null | Promise<Channel[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsChannels,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>
          }

    export type Owned_teamsResolver =
        | ((
              parent: User,
              args: ArgsOwned_teams,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Team[] | null | Promise<Team[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsOwned_teams,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>
          }

    export type Owned_channelsResolver =
        | ((
              parent: User,
              args: ArgsOwned_channels,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Channel[] | null | Promise<Channel[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: User,
                  args: ArgsOwned_channels,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>
          }

    export interface Type {
        id:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        email:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        notifications:
            | ((
                  parent: User,
                  args: ArgsNotifications,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Notification[] | null | Promise<Notification[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsNotifications,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Notification[] | null | Promise<Notification[] | null>
              }

        set_private:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        username:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        password:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        gitHubId:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        facebookId:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        twitterId:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        gmailId:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        directMessages:
            | ((
                  parent: User,
                  args: ArgsDirectMessages,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Comment[] | null | Promise<Comment[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsDirectMessages,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Comment[] | null | Promise<Comment[] | null>
              }

        avatar_url:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => File | Promise<File>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => File | Promise<File>
              }

        private:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        blockedUsers:
            | ((
                  parent: User,
                  args: ArgsBlockedUsers,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsBlockedUsers,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        confirmed:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        online:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        friends:
            | ((
                  parent: User,
                  args: ArgsFriends,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsFriends,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        friend_requests:
            | ((
                  parent: User,
                  args: ArgsFriend_requests,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsFriend_requests,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        createdAt:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        role:
            | ((
                  parent: User,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => UserRole | Promise<UserRole>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => UserRole | Promise<UserRole>
              }

        teams:
            | ((
                  parent: User,
                  args: ArgsTeams,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsTeams,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Team[] | null | Promise<Team[] | null>
              }

        channels:
            | ((
                  parent: User,
                  args: ArgsChannels,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsChannels,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Channel[] | null | Promise<Channel[] | null>
              }

        owned_teams:
            | ((
                  parent: User,
                  args: ArgsOwned_teams,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Team[] | null | Promise<Team[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsOwned_teams,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Team[] | null | Promise<Team[] | null>
              }

        owned_channels:
            | ((
                  parent: User,
                  args: ArgsOwned_channels,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: User,
                      args: ArgsOwned_channels,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Channel[] | null | Promise<Channel[] | null>
              }
    }
}

export namespace FileResolvers {
    export const defaultResolvers = {
        id: (parent: File) => parent.id,
        createdAt: (parent: File) => parent.createdAt,
        updatedAt: (parent: File) => parent.updatedAt,
        filename: (parent: File) => parent.filename,
        mimetype: (parent: File) => parent.mimetype,
        encoding: (parent: File) => parent.encoding,
        key: (parent: File) => parent.key,
        ETag: (parent: File) => parent.ETag,
        url: (parent: File) => parent.url,
    }

    export type IdResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type CreatedAtResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type FilenameResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type MimetypeResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type EncodingResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type KeyResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type ETagResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UrlResolver =
        | ((
              parent: File,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export interface Type {
        id:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        createdAt:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        filename:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        mimetype:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        encoding:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        key:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        ETag:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        url:
            | ((
                  parent: File,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: File,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }
    }
}

export namespace TeamResolvers {
    export const defaultResolvers = {
        id: (parent: Team) => parent.id,
        name: (parent: Team) => parent.name,
        slug: (parent: Team) => parent.slug,
        createdAt: (parent: Team) => parent.createdAt,
        updatedAt: (parent: Team) => parent.updatedAt,
        confirmed: (parent: Team) => parent.confirmed,
        online: (parent: Team) => parent.online,
    }

    export interface UserWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        email?: string | null
        email_not?: string | null
        email_in?: string[] | null
        email_not_in?: string[] | null
        email_lt?: string | null
        email_lte?: string | null
        email_gt?: string | null
        email_gte?: string | null
        email_contains?: string | null
        email_not_contains?: string | null
        email_starts_with?: string | null
        email_not_starts_with?: string | null
        email_ends_with?: string | null
        email_not_ends_with?: string | null
        notifications_every?: NotificationWhereInput | null
        notifications_some?: NotificationWhereInput | null
        notifications_none?: NotificationWhereInput | null
        set_private?: boolean | null
        set_private_not?: boolean | null
        username?: string | null
        username_not?: string | null
        username_in?: string[] | null
        username_not_in?: string[] | null
        username_lt?: string | null
        username_lte?: string | null
        username_gt?: string | null
        username_gte?: string | null
        username_contains?: string | null
        username_not_contains?: string | null
        username_starts_with?: string | null
        username_not_starts_with?: string | null
        username_ends_with?: string | null
        username_not_ends_with?: string | null
        password?: string | null
        password_not?: string | null
        password_in?: string[] | null
        password_not_in?: string[] | null
        password_lt?: string | null
        password_lte?: string | null
        password_gt?: string | null
        password_gte?: string | null
        password_contains?: string | null
        password_not_contains?: string | null
        password_starts_with?: string | null
        password_not_starts_with?: string | null
        password_ends_with?: string | null
        password_not_ends_with?: string | null
        gitHubId?: string | null
        gitHubId_not?: string | null
        gitHubId_in?: string[] | null
        gitHubId_not_in?: string[] | null
        gitHubId_lt?: string | null
        gitHubId_lte?: string | null
        gitHubId_gt?: string | null
        gitHubId_gte?: string | null
        gitHubId_contains?: string | null
        gitHubId_not_contains?: string | null
        gitHubId_starts_with?: string | null
        gitHubId_not_starts_with?: string | null
        gitHubId_ends_with?: string | null
        gitHubId_not_ends_with?: string | null
        facebookId?: string | null
        facebookId_not?: string | null
        facebookId_in?: string[] | null
        facebookId_not_in?: string[] | null
        facebookId_lt?: string | null
        facebookId_lte?: string | null
        facebookId_gt?: string | null
        facebookId_gte?: string | null
        facebookId_contains?: string | null
        facebookId_not_contains?: string | null
        facebookId_starts_with?: string | null
        facebookId_not_starts_with?: string | null
        facebookId_ends_with?: string | null
        facebookId_not_ends_with?: string | null
        twitterId?: string | null
        twitterId_not?: string | null
        twitterId_in?: string[] | null
        twitterId_not_in?: string[] | null
        twitterId_lt?: string | null
        twitterId_lte?: string | null
        twitterId_gt?: string | null
        twitterId_gte?: string | null
        twitterId_contains?: string | null
        twitterId_not_contains?: string | null
        twitterId_starts_with?: string | null
        twitterId_not_starts_with?: string | null
        twitterId_ends_with?: string | null
        twitterId_not_ends_with?: string | null
        gmailId?: string | null
        gmailId_not?: string | null
        gmailId_in?: string[] | null
        gmailId_not_in?: string[] | null
        gmailId_lt?: string | null
        gmailId_lte?: string | null
        gmailId_gt?: string | null
        gmailId_gte?: string | null
        gmailId_contains?: string | null
        gmailId_not_contains?: string | null
        gmailId_starts_with?: string | null
        gmailId_not_starts_with?: string | null
        gmailId_ends_with?: string | null
        gmailId_not_ends_with?: string | null
        directMessages_every?: CommentWhereInput | null
        directMessages_some?: CommentWhereInput | null
        directMessages_none?: CommentWhereInput | null
        avatar_url?: FileWhereInput | null
        private?: boolean | null
        private_not?: boolean | null
        blockedUsers_every?: UserWhereInput | null
        blockedUsers_some?: UserWhereInput | null
        blockedUsers_none?: UserWhereInput | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        friends_every?: UserWhereInput | null
        friends_some?: UserWhereInput | null
        friends_none?: UserWhereInput | null
        friend_requests_every?: UserWhereInput | null
        friend_requests_some?: UserWhereInput | null
        friend_requests_none?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        role?: UserRole | null
        role_not?: UserRole | null
        role_in?: UserRole[] | null
        role_not_in?: UserRole[] | null
        teams_every?: TeamWhereInput | null
        teams_some?: TeamWhereInput | null
        teams_none?: TeamWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        owned_teams_every?: TeamWhereInput | null
        owned_teams_some?: TeamWhereInput | null
        owned_teams_none?: TeamWhereInput | null
        owned_channels_every?: ChannelWhereInput | null
        owned_channels_some?: ChannelWhereInput | null
        owned_channels_none?: ChannelWhereInput | null
        AND?: UserWhereInput[] | null
        OR?: UserWhereInput[] | null
        NOT?: UserWhereInput[] | null
    }
    export interface ChannelWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        public?: boolean | null
        public_not?: boolean | null
        messages_every?: MessageWhereInput | null
        messages_some?: MessageWhereInput | null
        messages_none?: MessageWhereInput | null
        teamId?: string | null
        teamId_not?: string | null
        teamId_in?: string[] | null
        teamId_not_in?: string[] | null
        teamId_lt?: string | null
        teamId_lte?: string | null
        teamId_gt?: string | null
        teamId_gte?: string | null
        teamId_contains?: string | null
        teamId_not_contains?: string | null
        teamId_starts_with?: string | null
        teamId_not_starts_with?: string | null
        teamId_ends_with?: string | null
        teamId_not_ends_with?: string | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: ChannelWhereInput[] | null
        OR?: ChannelWhereInput[] | null
        NOT?: ChannelWhereInput[] | null
    }
    export interface NotificationWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        message?: string | null
        message_not?: string | null
        message_in?: string[] | null
        message_not_in?: string[] | null
        message_lt?: string | null
        message_lte?: string | null
        message_gt?: string | null
        message_gte?: string | null
        message_contains?: string | null
        message_not_contains?: string | null
        message_starts_with?: string | null
        message_not_starts_with?: string | null
        message_ends_with?: string | null
        message_not_ends_with?: string | null
        comments?: CommentWhereInput | null
        messages?: MessageWhereInput | null
        team?: TeamWhereInput | null
        channel?: ChannelWhereInput | null
        friend_requests?: UserWhereInput | null
        friend?: UserWhereInput | null
        author?: UserWhereInput | null
        AND?: NotificationWhereInput[] | null
        OR?: NotificationWhereInput[] | null
        NOT?: NotificationWhereInput[] | null
    }
    export interface CommentWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        pageId?: string | null
        pageId_not?: string | null
        pageId_in?: string[] | null
        pageId_not_in?: string[] | null
        pageId_lt?: string | null
        pageId_lte?: string | null
        pageId_gt?: string | null
        pageId_gte?: string | null
        pageId_contains?: string | null
        pageId_not_contains?: string | null
        pageId_starts_with?: string | null
        pageId_not_starts_with?: string | null
        pageId_ends_with?: string | null
        pageId_not_ends_with?: string | null
        repliedTo?: UserWhereInput | null
        ratings?: RatingWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        replies_every?: CommentWhereInput | null
        replies_some?: CommentWhereInput | null
        replies_none?: CommentWhereInput | null
        author?: UserWhereInput | null
        AND?: CommentWhereInput[] | null
        OR?: CommentWhereInput[] | null
        NOT?: CommentWhereInput[] | null
    }
    export interface FileWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        filename?: string | null
        filename_not?: string | null
        filename_in?: string[] | null
        filename_not_in?: string[] | null
        filename_lt?: string | null
        filename_lte?: string | null
        filename_gt?: string | null
        filename_gte?: string | null
        filename_contains?: string | null
        filename_not_contains?: string | null
        filename_starts_with?: string | null
        filename_not_starts_with?: string | null
        filename_ends_with?: string | null
        filename_not_ends_with?: string | null
        mimetype?: string | null
        mimetype_not?: string | null
        mimetype_in?: string[] | null
        mimetype_not_in?: string[] | null
        mimetype_lt?: string | null
        mimetype_lte?: string | null
        mimetype_gt?: string | null
        mimetype_gte?: string | null
        mimetype_contains?: string | null
        mimetype_not_contains?: string | null
        mimetype_starts_with?: string | null
        mimetype_not_starts_with?: string | null
        mimetype_ends_with?: string | null
        mimetype_not_ends_with?: string | null
        encoding?: string | null
        encoding_not?: string | null
        encoding_in?: string[] | null
        encoding_not_in?: string[] | null
        encoding_lt?: string | null
        encoding_lte?: string | null
        encoding_gt?: string | null
        encoding_gte?: string | null
        encoding_contains?: string | null
        encoding_not_contains?: string | null
        encoding_starts_with?: string | null
        encoding_not_starts_with?: string | null
        encoding_ends_with?: string | null
        encoding_not_ends_with?: string | null
        key?: string | null
        key_not?: string | null
        key_in?: string[] | null
        key_not_in?: string[] | null
        key_lt?: string | null
        key_lte?: string | null
        key_gt?: string | null
        key_gte?: string | null
        key_contains?: string | null
        key_not_contains?: string | null
        key_starts_with?: string | null
        key_not_starts_with?: string | null
        key_ends_with?: string | null
        key_not_ends_with?: string | null
        ETag?: string | null
        ETag_not?: string | null
        ETag_in?: string[] | null
        ETag_not_in?: string[] | null
        ETag_lt?: string | null
        ETag_lte?: string | null
        ETag_gt?: string | null
        ETag_gte?: string | null
        ETag_contains?: string | null
        ETag_not_contains?: string | null
        ETag_starts_with?: string | null
        ETag_not_starts_with?: string | null
        ETag_ends_with?: string | null
        ETag_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        AND?: FileWhereInput[] | null
        OR?: FileWhereInput[] | null
        NOT?: FileWhereInput[] | null
    }
    export interface TeamWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        author?: UserWhereInput | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        AND?: TeamWhereInput[] | null
        OR?: TeamWhereInput[] | null
        NOT?: TeamWhereInput[] | null
    }
    export interface MessageWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        filetype?: string | null
        filetype_not?: string | null
        filetype_in?: string[] | null
        filetype_not_in?: string[] | null
        filetype_lt?: string | null
        filetype_lte?: string | null
        filetype_gt?: string | null
        filetype_gte?: string | null
        filetype_contains?: string | null
        filetype_not_contains?: string | null
        filetype_starts_with?: string | null
        filetype_not_starts_with?: string | null
        filetype_ends_with?: string | null
        filetype_not_ends_with?: string | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: MessageWhereInput[] | null
        OR?: MessageWhereInput[] | null
        NOT?: MessageWhereInput[] | null
    }
    export interface RatingWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        vote?: number | null
        vote_not?: number | null
        vote_in?: number[] | null
        vote_not_in?: number[] | null
        vote_lt?: number | null
        vote_lte?: number | null
        vote_gt?: number | null
        vote_gte?: number | null
        author_every?: UserWhereInput | null
        author_some?: UserWhereInput | null
        author_none?: UserWhereInput | null
        AND?: RatingWhereInput[] | null
        OR?: RatingWhereInput[] | null
        NOT?: RatingWhereInput[] | null
    }

    export interface ArgsModerators {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsMembers {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsChannels {
        where?: ChannelWhereInput | null
        orderBy?: ChannelOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export type IdResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type NameResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type SlugResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type ModeratorsResolver =
        | ((
              parent: Team,
              args: ArgsModerators,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: ArgsModerators,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type AuthorResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | Promise<User>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>
          }

    export type MembersResolver =
        | ((
              parent: Team,
              args: ArgsMembers,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: ArgsMembers,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type ChannelsResolver =
        | ((
              parent: Team,
              args: ArgsChannels,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Channel[] | null | Promise<Channel[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: ArgsChannels,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>
          }

    export type CreatedAtResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type ConfirmedResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type OnlineResolver =
        | ((
              parent: Team,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export interface Type {
        id:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        name:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        slug:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        moderators:
            | ((
                  parent: Team,
                  args: ArgsModerators,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: ArgsModerators,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        author:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | Promise<User>
              }

        members:
            | ((
                  parent: Team,
                  args: ArgsMembers,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: ArgsMembers,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        channels:
            | ((
                  parent: Team,
                  args: ArgsChannels,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Channel[] | null | Promise<Channel[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: ArgsChannels,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Channel[] | null | Promise<Channel[] | null>
              }

        createdAt:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        confirmed:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        online:
            | ((
                  parent: Team,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: Team,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }
    }
}

export namespace ChannelResolvers {
    export const defaultResolvers = {
        id: (parent: Channel) => parent.id,
        name: (parent: Channel) => parent.name,
        slug: (parent: Channel) => parent.slug,
        public: (parent: Channel) =>
            parent.public === undefined ? null : parent.public,
        teamId: (parent: Channel) => parent.teamId,
        createdAt: (parent: Channel) => parent.createdAt,
        updatedAt: (parent: Channel) => parent.updatedAt,
    }

    export interface UserWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        email?: string | null
        email_not?: string | null
        email_in?: string[] | null
        email_not_in?: string[] | null
        email_lt?: string | null
        email_lte?: string | null
        email_gt?: string | null
        email_gte?: string | null
        email_contains?: string | null
        email_not_contains?: string | null
        email_starts_with?: string | null
        email_not_starts_with?: string | null
        email_ends_with?: string | null
        email_not_ends_with?: string | null
        notifications_every?: NotificationWhereInput | null
        notifications_some?: NotificationWhereInput | null
        notifications_none?: NotificationWhereInput | null
        set_private?: boolean | null
        set_private_not?: boolean | null
        username?: string | null
        username_not?: string | null
        username_in?: string[] | null
        username_not_in?: string[] | null
        username_lt?: string | null
        username_lte?: string | null
        username_gt?: string | null
        username_gte?: string | null
        username_contains?: string | null
        username_not_contains?: string | null
        username_starts_with?: string | null
        username_not_starts_with?: string | null
        username_ends_with?: string | null
        username_not_ends_with?: string | null
        password?: string | null
        password_not?: string | null
        password_in?: string[] | null
        password_not_in?: string[] | null
        password_lt?: string | null
        password_lte?: string | null
        password_gt?: string | null
        password_gte?: string | null
        password_contains?: string | null
        password_not_contains?: string | null
        password_starts_with?: string | null
        password_not_starts_with?: string | null
        password_ends_with?: string | null
        password_not_ends_with?: string | null
        gitHubId?: string | null
        gitHubId_not?: string | null
        gitHubId_in?: string[] | null
        gitHubId_not_in?: string[] | null
        gitHubId_lt?: string | null
        gitHubId_lte?: string | null
        gitHubId_gt?: string | null
        gitHubId_gte?: string | null
        gitHubId_contains?: string | null
        gitHubId_not_contains?: string | null
        gitHubId_starts_with?: string | null
        gitHubId_not_starts_with?: string | null
        gitHubId_ends_with?: string | null
        gitHubId_not_ends_with?: string | null
        facebookId?: string | null
        facebookId_not?: string | null
        facebookId_in?: string[] | null
        facebookId_not_in?: string[] | null
        facebookId_lt?: string | null
        facebookId_lte?: string | null
        facebookId_gt?: string | null
        facebookId_gte?: string | null
        facebookId_contains?: string | null
        facebookId_not_contains?: string | null
        facebookId_starts_with?: string | null
        facebookId_not_starts_with?: string | null
        facebookId_ends_with?: string | null
        facebookId_not_ends_with?: string | null
        twitterId?: string | null
        twitterId_not?: string | null
        twitterId_in?: string[] | null
        twitterId_not_in?: string[] | null
        twitterId_lt?: string | null
        twitterId_lte?: string | null
        twitterId_gt?: string | null
        twitterId_gte?: string | null
        twitterId_contains?: string | null
        twitterId_not_contains?: string | null
        twitterId_starts_with?: string | null
        twitterId_not_starts_with?: string | null
        twitterId_ends_with?: string | null
        twitterId_not_ends_with?: string | null
        gmailId?: string | null
        gmailId_not?: string | null
        gmailId_in?: string[] | null
        gmailId_not_in?: string[] | null
        gmailId_lt?: string | null
        gmailId_lte?: string | null
        gmailId_gt?: string | null
        gmailId_gte?: string | null
        gmailId_contains?: string | null
        gmailId_not_contains?: string | null
        gmailId_starts_with?: string | null
        gmailId_not_starts_with?: string | null
        gmailId_ends_with?: string | null
        gmailId_not_ends_with?: string | null
        directMessages_every?: CommentWhereInput | null
        directMessages_some?: CommentWhereInput | null
        directMessages_none?: CommentWhereInput | null
        avatar_url?: FileWhereInput | null
        private?: boolean | null
        private_not?: boolean | null
        blockedUsers_every?: UserWhereInput | null
        blockedUsers_some?: UserWhereInput | null
        blockedUsers_none?: UserWhereInput | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        friends_every?: UserWhereInput | null
        friends_some?: UserWhereInput | null
        friends_none?: UserWhereInput | null
        friend_requests_every?: UserWhereInput | null
        friend_requests_some?: UserWhereInput | null
        friend_requests_none?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        role?: UserRole | null
        role_not?: UserRole | null
        role_in?: UserRole[] | null
        role_not_in?: UserRole[] | null
        teams_every?: TeamWhereInput | null
        teams_some?: TeamWhereInput | null
        teams_none?: TeamWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        owned_teams_every?: TeamWhereInput | null
        owned_teams_some?: TeamWhereInput | null
        owned_teams_none?: TeamWhereInput | null
        owned_channels_every?: ChannelWhereInput | null
        owned_channels_some?: ChannelWhereInput | null
        owned_channels_none?: ChannelWhereInput | null
        AND?: UserWhereInput[] | null
        OR?: UserWhereInput[] | null
        NOT?: UserWhereInput[] | null
    }
    export interface MessageWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        filetype?: string | null
        filetype_not?: string | null
        filetype_in?: string[] | null
        filetype_not_in?: string[] | null
        filetype_lt?: string | null
        filetype_lte?: string | null
        filetype_gt?: string | null
        filetype_gte?: string | null
        filetype_contains?: string | null
        filetype_not_contains?: string | null
        filetype_starts_with?: string | null
        filetype_not_starts_with?: string | null
        filetype_ends_with?: string | null
        filetype_not_ends_with?: string | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: MessageWhereInput[] | null
        OR?: MessageWhereInput[] | null
        NOT?: MessageWhereInput[] | null
    }
    export interface NotificationWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        message?: string | null
        message_not?: string | null
        message_in?: string[] | null
        message_not_in?: string[] | null
        message_lt?: string | null
        message_lte?: string | null
        message_gt?: string | null
        message_gte?: string | null
        message_contains?: string | null
        message_not_contains?: string | null
        message_starts_with?: string | null
        message_not_starts_with?: string | null
        message_ends_with?: string | null
        message_not_ends_with?: string | null
        comments?: CommentWhereInput | null
        messages?: MessageWhereInput | null
        team?: TeamWhereInput | null
        channel?: ChannelWhereInput | null
        friend_requests?: UserWhereInput | null
        friend?: UserWhereInput | null
        author?: UserWhereInput | null
        AND?: NotificationWhereInput[] | null
        OR?: NotificationWhereInput[] | null
        NOT?: NotificationWhereInput[] | null
    }
    export interface CommentWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        pageId?: string | null
        pageId_not?: string | null
        pageId_in?: string[] | null
        pageId_not_in?: string[] | null
        pageId_lt?: string | null
        pageId_lte?: string | null
        pageId_gt?: string | null
        pageId_gte?: string | null
        pageId_contains?: string | null
        pageId_not_contains?: string | null
        pageId_starts_with?: string | null
        pageId_not_starts_with?: string | null
        pageId_ends_with?: string | null
        pageId_not_ends_with?: string | null
        repliedTo?: UserWhereInput | null
        ratings?: RatingWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        replies_every?: CommentWhereInput | null
        replies_some?: CommentWhereInput | null
        replies_none?: CommentWhereInput | null
        author?: UserWhereInput | null
        AND?: CommentWhereInput[] | null
        OR?: CommentWhereInput[] | null
        NOT?: CommentWhereInput[] | null
    }
    export interface FileWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        filename?: string | null
        filename_not?: string | null
        filename_in?: string[] | null
        filename_not_in?: string[] | null
        filename_lt?: string | null
        filename_lte?: string | null
        filename_gt?: string | null
        filename_gte?: string | null
        filename_contains?: string | null
        filename_not_contains?: string | null
        filename_starts_with?: string | null
        filename_not_starts_with?: string | null
        filename_ends_with?: string | null
        filename_not_ends_with?: string | null
        mimetype?: string | null
        mimetype_not?: string | null
        mimetype_in?: string[] | null
        mimetype_not_in?: string[] | null
        mimetype_lt?: string | null
        mimetype_lte?: string | null
        mimetype_gt?: string | null
        mimetype_gte?: string | null
        mimetype_contains?: string | null
        mimetype_not_contains?: string | null
        mimetype_starts_with?: string | null
        mimetype_not_starts_with?: string | null
        mimetype_ends_with?: string | null
        mimetype_not_ends_with?: string | null
        encoding?: string | null
        encoding_not?: string | null
        encoding_in?: string[] | null
        encoding_not_in?: string[] | null
        encoding_lt?: string | null
        encoding_lte?: string | null
        encoding_gt?: string | null
        encoding_gte?: string | null
        encoding_contains?: string | null
        encoding_not_contains?: string | null
        encoding_starts_with?: string | null
        encoding_not_starts_with?: string | null
        encoding_ends_with?: string | null
        encoding_not_ends_with?: string | null
        key?: string | null
        key_not?: string | null
        key_in?: string[] | null
        key_not_in?: string[] | null
        key_lt?: string | null
        key_lte?: string | null
        key_gt?: string | null
        key_gte?: string | null
        key_contains?: string | null
        key_not_contains?: string | null
        key_starts_with?: string | null
        key_not_starts_with?: string | null
        key_ends_with?: string | null
        key_not_ends_with?: string | null
        ETag?: string | null
        ETag_not?: string | null
        ETag_in?: string[] | null
        ETag_not_in?: string[] | null
        ETag_lt?: string | null
        ETag_lte?: string | null
        ETag_gt?: string | null
        ETag_gte?: string | null
        ETag_contains?: string | null
        ETag_not_contains?: string | null
        ETag_starts_with?: string | null
        ETag_not_starts_with?: string | null
        ETag_ends_with?: string | null
        ETag_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        AND?: FileWhereInput[] | null
        OR?: FileWhereInput[] | null
        NOT?: FileWhereInput[] | null
    }
    export interface TeamWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        author?: UserWhereInput | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        AND?: TeamWhereInput[] | null
        OR?: TeamWhereInput[] | null
        NOT?: TeamWhereInput[] | null
    }
    export interface ChannelWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        public?: boolean | null
        public_not?: boolean | null
        messages_every?: MessageWhereInput | null
        messages_some?: MessageWhereInput | null
        messages_none?: MessageWhereInput | null
        teamId?: string | null
        teamId_not?: string | null
        teamId_in?: string[] | null
        teamId_not_in?: string[] | null
        teamId_lt?: string | null
        teamId_lte?: string | null
        teamId_gt?: string | null
        teamId_gte?: string | null
        teamId_contains?: string | null
        teamId_not_contains?: string | null
        teamId_starts_with?: string | null
        teamId_not_starts_with?: string | null
        teamId_ends_with?: string | null
        teamId_not_ends_with?: string | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: ChannelWhereInput[] | null
        OR?: ChannelWhereInput[] | null
        NOT?: ChannelWhereInput[] | null
    }
    export interface RatingWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        vote?: number | null
        vote_not?: number | null
        vote_in?: number[] | null
        vote_not_in?: number[] | null
        vote_lt?: number | null
        vote_lte?: number | null
        vote_gt?: number | null
        vote_gte?: number | null
        author_every?: UserWhereInput | null
        author_some?: UserWhereInput | null
        author_none?: UserWhereInput | null
        AND?: RatingWhereInput[] | null
        OR?: RatingWhereInput[] | null
        NOT?: RatingWhereInput[] | null
    }

    export interface ArgsModerators {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsMessages {
        where?: MessageWhereInput | null
        orderBy?: MessageOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export interface ArgsMembers {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export type IdResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type NameResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type SlugResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type ModeratorsResolver =
        | ((
              parent: Channel,
              args: ArgsModerators,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: ArgsModerators,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type PublicResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | null | Promise<boolean | null>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | null | Promise<boolean | null>
          }

    export type MessagesResolver =
        | ((
              parent: Channel,
              args: ArgsMessages,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Message[] | null | Promise<Message[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: ArgsMessages,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Message[] | null | Promise<Message[] | null>
          }

    export type TeamIdResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type MembersResolver =
        | ((
              parent: Channel,
              args: ArgsMembers,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: ArgsMembers,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export type AuthorResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | Promise<User>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>
          }

    export type CreatedAtResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: Channel,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export interface Type {
        id:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        name:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        slug:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        moderators:
            | ((
                  parent: Channel,
                  args: ArgsModerators,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: ArgsModerators,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        public:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | null | Promise<boolean | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | null | Promise<boolean | null>
              }

        messages:
            | ((
                  parent: Channel,
                  args: ArgsMessages,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Message[] | null | Promise<Message[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: ArgsMessages,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Message[] | null | Promise<Message[] | null>
              }

        teamId:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        members:
            | ((
                  parent: Channel,
                  args: ArgsMembers,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: ArgsMembers,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }

        author:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | Promise<User>
              }

        createdAt:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: Channel,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Channel,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }
    }
}

export namespace MessageResolvers {
    export const defaultResolvers = {
        id: (parent: Message) => parent.id,
        body: (parent: Message) => parent.body,
        parentId: (parent: Message) => parent.parentId,
        url: (parent: Message) => parent.url,
        filetype: (parent: Message) => parent.filetype,
        createdAt: (parent: Message) => parent.createdAt,
        updatedAt: (parent: Message) => parent.updatedAt,
    }

    export type IdResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type BodyResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type ParentIdResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UrlResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type FiletypeResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type AuthorResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | Promise<User>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>
          }

    export type CreatedAtResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UpdatedAtResolver =
        | ((
              parent: Message,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export interface Type {
        id:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        body:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        parentId:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        url:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        filetype:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        author:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | Promise<User>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | Promise<User>
              }

        createdAt:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        updatedAt:
            | ((
                  parent: Message,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Message,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }
    }
}

export namespace RatingResolvers {
    export const defaultResolvers = {
        id: (parent: Rating) => parent.id,
        vote: (parent: Rating) => parent.vote,
    }

    export interface UserWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        email?: string | null
        email_not?: string | null
        email_in?: string[] | null
        email_not_in?: string[] | null
        email_lt?: string | null
        email_lte?: string | null
        email_gt?: string | null
        email_gte?: string | null
        email_contains?: string | null
        email_not_contains?: string | null
        email_starts_with?: string | null
        email_not_starts_with?: string | null
        email_ends_with?: string | null
        email_not_ends_with?: string | null
        notifications_every?: NotificationWhereInput | null
        notifications_some?: NotificationWhereInput | null
        notifications_none?: NotificationWhereInput | null
        set_private?: boolean | null
        set_private_not?: boolean | null
        username?: string | null
        username_not?: string | null
        username_in?: string[] | null
        username_not_in?: string[] | null
        username_lt?: string | null
        username_lte?: string | null
        username_gt?: string | null
        username_gte?: string | null
        username_contains?: string | null
        username_not_contains?: string | null
        username_starts_with?: string | null
        username_not_starts_with?: string | null
        username_ends_with?: string | null
        username_not_ends_with?: string | null
        password?: string | null
        password_not?: string | null
        password_in?: string[] | null
        password_not_in?: string[] | null
        password_lt?: string | null
        password_lte?: string | null
        password_gt?: string | null
        password_gte?: string | null
        password_contains?: string | null
        password_not_contains?: string | null
        password_starts_with?: string | null
        password_not_starts_with?: string | null
        password_ends_with?: string | null
        password_not_ends_with?: string | null
        gitHubId?: string | null
        gitHubId_not?: string | null
        gitHubId_in?: string[] | null
        gitHubId_not_in?: string[] | null
        gitHubId_lt?: string | null
        gitHubId_lte?: string | null
        gitHubId_gt?: string | null
        gitHubId_gte?: string | null
        gitHubId_contains?: string | null
        gitHubId_not_contains?: string | null
        gitHubId_starts_with?: string | null
        gitHubId_not_starts_with?: string | null
        gitHubId_ends_with?: string | null
        gitHubId_not_ends_with?: string | null
        facebookId?: string | null
        facebookId_not?: string | null
        facebookId_in?: string[] | null
        facebookId_not_in?: string[] | null
        facebookId_lt?: string | null
        facebookId_lte?: string | null
        facebookId_gt?: string | null
        facebookId_gte?: string | null
        facebookId_contains?: string | null
        facebookId_not_contains?: string | null
        facebookId_starts_with?: string | null
        facebookId_not_starts_with?: string | null
        facebookId_ends_with?: string | null
        facebookId_not_ends_with?: string | null
        twitterId?: string | null
        twitterId_not?: string | null
        twitterId_in?: string[] | null
        twitterId_not_in?: string[] | null
        twitterId_lt?: string | null
        twitterId_lte?: string | null
        twitterId_gt?: string | null
        twitterId_gte?: string | null
        twitterId_contains?: string | null
        twitterId_not_contains?: string | null
        twitterId_starts_with?: string | null
        twitterId_not_starts_with?: string | null
        twitterId_ends_with?: string | null
        twitterId_not_ends_with?: string | null
        gmailId?: string | null
        gmailId_not?: string | null
        gmailId_in?: string[] | null
        gmailId_not_in?: string[] | null
        gmailId_lt?: string | null
        gmailId_lte?: string | null
        gmailId_gt?: string | null
        gmailId_gte?: string | null
        gmailId_contains?: string | null
        gmailId_not_contains?: string | null
        gmailId_starts_with?: string | null
        gmailId_not_starts_with?: string | null
        gmailId_ends_with?: string | null
        gmailId_not_ends_with?: string | null
        directMessages_every?: CommentWhereInput | null
        directMessages_some?: CommentWhereInput | null
        directMessages_none?: CommentWhereInput | null
        avatar_url?: FileWhereInput | null
        private?: boolean | null
        private_not?: boolean | null
        blockedUsers_every?: UserWhereInput | null
        blockedUsers_some?: UserWhereInput | null
        blockedUsers_none?: UserWhereInput | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        friends_every?: UserWhereInput | null
        friends_some?: UserWhereInput | null
        friends_none?: UserWhereInput | null
        friend_requests_every?: UserWhereInput | null
        friend_requests_some?: UserWhereInput | null
        friend_requests_none?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        role?: UserRole | null
        role_not?: UserRole | null
        role_in?: UserRole[] | null
        role_not_in?: UserRole[] | null
        teams_every?: TeamWhereInput | null
        teams_some?: TeamWhereInput | null
        teams_none?: TeamWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        owned_teams_every?: TeamWhereInput | null
        owned_teams_some?: TeamWhereInput | null
        owned_teams_none?: TeamWhereInput | null
        owned_channels_every?: ChannelWhereInput | null
        owned_channels_some?: ChannelWhereInput | null
        owned_channels_none?: ChannelWhereInput | null
        AND?: UserWhereInput[] | null
        OR?: UserWhereInput[] | null
        NOT?: UserWhereInput[] | null
    }
    export interface NotificationWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        message?: string | null
        message_not?: string | null
        message_in?: string[] | null
        message_not_in?: string[] | null
        message_lt?: string | null
        message_lte?: string | null
        message_gt?: string | null
        message_gte?: string | null
        message_contains?: string | null
        message_not_contains?: string | null
        message_starts_with?: string | null
        message_not_starts_with?: string | null
        message_ends_with?: string | null
        message_not_ends_with?: string | null
        comments?: CommentWhereInput | null
        messages?: MessageWhereInput | null
        team?: TeamWhereInput | null
        channel?: ChannelWhereInput | null
        friend_requests?: UserWhereInput | null
        friend?: UserWhereInput | null
        author?: UserWhereInput | null
        AND?: NotificationWhereInput[] | null
        OR?: NotificationWhereInput[] | null
        NOT?: NotificationWhereInput[] | null
    }
    export interface CommentWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        pageId?: string | null
        pageId_not?: string | null
        pageId_in?: string[] | null
        pageId_not_in?: string[] | null
        pageId_lt?: string | null
        pageId_lte?: string | null
        pageId_gt?: string | null
        pageId_gte?: string | null
        pageId_contains?: string | null
        pageId_not_contains?: string | null
        pageId_starts_with?: string | null
        pageId_not_starts_with?: string | null
        pageId_ends_with?: string | null
        pageId_not_ends_with?: string | null
        repliedTo?: UserWhereInput | null
        ratings?: RatingWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        replies_every?: CommentWhereInput | null
        replies_some?: CommentWhereInput | null
        replies_none?: CommentWhereInput | null
        author?: UserWhereInput | null
        AND?: CommentWhereInput[] | null
        OR?: CommentWhereInput[] | null
        NOT?: CommentWhereInput[] | null
    }
    export interface FileWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        filename?: string | null
        filename_not?: string | null
        filename_in?: string[] | null
        filename_not_in?: string[] | null
        filename_lt?: string | null
        filename_lte?: string | null
        filename_gt?: string | null
        filename_gte?: string | null
        filename_contains?: string | null
        filename_not_contains?: string | null
        filename_starts_with?: string | null
        filename_not_starts_with?: string | null
        filename_ends_with?: string | null
        filename_not_ends_with?: string | null
        mimetype?: string | null
        mimetype_not?: string | null
        mimetype_in?: string[] | null
        mimetype_not_in?: string[] | null
        mimetype_lt?: string | null
        mimetype_lte?: string | null
        mimetype_gt?: string | null
        mimetype_gte?: string | null
        mimetype_contains?: string | null
        mimetype_not_contains?: string | null
        mimetype_starts_with?: string | null
        mimetype_not_starts_with?: string | null
        mimetype_ends_with?: string | null
        mimetype_not_ends_with?: string | null
        encoding?: string | null
        encoding_not?: string | null
        encoding_in?: string[] | null
        encoding_not_in?: string[] | null
        encoding_lt?: string | null
        encoding_lte?: string | null
        encoding_gt?: string | null
        encoding_gte?: string | null
        encoding_contains?: string | null
        encoding_not_contains?: string | null
        encoding_starts_with?: string | null
        encoding_not_starts_with?: string | null
        encoding_ends_with?: string | null
        encoding_not_ends_with?: string | null
        key?: string | null
        key_not?: string | null
        key_in?: string[] | null
        key_not_in?: string[] | null
        key_lt?: string | null
        key_lte?: string | null
        key_gt?: string | null
        key_gte?: string | null
        key_contains?: string | null
        key_not_contains?: string | null
        key_starts_with?: string | null
        key_not_starts_with?: string | null
        key_ends_with?: string | null
        key_not_ends_with?: string | null
        ETag?: string | null
        ETag_not?: string | null
        ETag_in?: string[] | null
        ETag_not_in?: string[] | null
        ETag_lt?: string | null
        ETag_lte?: string | null
        ETag_gt?: string | null
        ETag_gte?: string | null
        ETag_contains?: string | null
        ETag_not_contains?: string | null
        ETag_starts_with?: string | null
        ETag_not_starts_with?: string | null
        ETag_ends_with?: string | null
        ETag_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        AND?: FileWhereInput[] | null
        OR?: FileWhereInput[] | null
        NOT?: FileWhereInput[] | null
    }
    export interface TeamWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        author?: UserWhereInput | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        channels_every?: ChannelWhereInput | null
        channels_some?: ChannelWhereInput | null
        channels_none?: ChannelWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        confirmed?: boolean | null
        confirmed_not?: boolean | null
        online?: boolean | null
        online_not?: boolean | null
        AND?: TeamWhereInput[] | null
        OR?: TeamWhereInput[] | null
        NOT?: TeamWhereInput[] | null
    }
    export interface ChannelWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        name?: string | null
        name_not?: string | null
        name_in?: string[] | null
        name_not_in?: string[] | null
        name_lt?: string | null
        name_lte?: string | null
        name_gt?: string | null
        name_gte?: string | null
        name_contains?: string | null
        name_not_contains?: string | null
        name_starts_with?: string | null
        name_not_starts_with?: string | null
        name_ends_with?: string | null
        name_not_ends_with?: string | null
        slug?: string | null
        slug_not?: string | null
        slug_in?: string[] | null
        slug_not_in?: string[] | null
        slug_lt?: string | null
        slug_lte?: string | null
        slug_gt?: string | null
        slug_gte?: string | null
        slug_contains?: string | null
        slug_not_contains?: string | null
        slug_starts_with?: string | null
        slug_not_starts_with?: string | null
        slug_ends_with?: string | null
        slug_not_ends_with?: string | null
        moderators_every?: UserWhereInput | null
        moderators_some?: UserWhereInput | null
        moderators_none?: UserWhereInput | null
        public?: boolean | null
        public_not?: boolean | null
        messages_every?: MessageWhereInput | null
        messages_some?: MessageWhereInput | null
        messages_none?: MessageWhereInput | null
        teamId?: string | null
        teamId_not?: string | null
        teamId_in?: string[] | null
        teamId_not_in?: string[] | null
        teamId_lt?: string | null
        teamId_lte?: string | null
        teamId_gt?: string | null
        teamId_gte?: string | null
        teamId_contains?: string | null
        teamId_not_contains?: string | null
        teamId_starts_with?: string | null
        teamId_not_starts_with?: string | null
        teamId_ends_with?: string | null
        teamId_not_ends_with?: string | null
        members_every?: UserWhereInput | null
        members_some?: UserWhereInput | null
        members_none?: UserWhereInput | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: ChannelWhereInput[] | null
        OR?: ChannelWhereInput[] | null
        NOT?: ChannelWhereInput[] | null
    }
    export interface MessageWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        body?: string | null
        body_not?: string | null
        body_in?: string[] | null
        body_not_in?: string[] | null
        body_lt?: string | null
        body_lte?: string | null
        body_gt?: string | null
        body_gte?: string | null
        body_contains?: string | null
        body_not_contains?: string | null
        body_starts_with?: string | null
        body_not_starts_with?: string | null
        body_ends_with?: string | null
        body_not_ends_with?: string | null
        parentId?: string | null
        parentId_not?: string | null
        parentId_in?: string[] | null
        parentId_not_in?: string[] | null
        parentId_lt?: string | null
        parentId_lte?: string | null
        parentId_gt?: string | null
        parentId_gte?: string | null
        parentId_contains?: string | null
        parentId_not_contains?: string | null
        parentId_starts_with?: string | null
        parentId_not_starts_with?: string | null
        parentId_ends_with?: string | null
        parentId_not_ends_with?: string | null
        url?: string | null
        url_not?: string | null
        url_in?: string[] | null
        url_not_in?: string[] | null
        url_lt?: string | null
        url_lte?: string | null
        url_gt?: string | null
        url_gte?: string | null
        url_contains?: string | null
        url_not_contains?: string | null
        url_starts_with?: string | null
        url_not_starts_with?: string | null
        url_ends_with?: string | null
        url_not_ends_with?: string | null
        filetype?: string | null
        filetype_not?: string | null
        filetype_in?: string[] | null
        filetype_not_in?: string[] | null
        filetype_lt?: string | null
        filetype_lte?: string | null
        filetype_gt?: string | null
        filetype_gte?: string | null
        filetype_contains?: string | null
        filetype_not_contains?: string | null
        filetype_starts_with?: string | null
        filetype_not_starts_with?: string | null
        filetype_ends_with?: string | null
        filetype_not_ends_with?: string | null
        author?: UserWhereInput | null
        createdAt?: string | null
        createdAt_not?: string | null
        createdAt_in?: string[] | null
        createdAt_not_in?: string[] | null
        createdAt_lt?: string | null
        createdAt_lte?: string | null
        createdAt_gt?: string | null
        createdAt_gte?: string | null
        updatedAt?: string | null
        updatedAt_not?: string | null
        updatedAt_in?: string[] | null
        updatedAt_not_in?: string[] | null
        updatedAt_lt?: string | null
        updatedAt_lte?: string | null
        updatedAt_gt?: string | null
        updatedAt_gte?: string | null
        AND?: MessageWhereInput[] | null
        OR?: MessageWhereInput[] | null
        NOT?: MessageWhereInput[] | null
    }
    export interface RatingWhereInput {
        id?: string | null
        id_not?: string | null
        id_in?: string[] | null
        id_not_in?: string[] | null
        id_lt?: string | null
        id_lte?: string | null
        id_gt?: string | null
        id_gte?: string | null
        id_contains?: string | null
        id_not_contains?: string | null
        id_starts_with?: string | null
        id_not_starts_with?: string | null
        id_ends_with?: string | null
        id_not_ends_with?: string | null
        vote?: number | null
        vote_not?: number | null
        vote_in?: number[] | null
        vote_not_in?: number[] | null
        vote_lt?: number | null
        vote_lte?: number | null
        vote_gt?: number | null
        vote_gte?: number | null
        author_every?: UserWhereInput | null
        author_some?: UserWhereInput | null
        author_none?: UserWhereInput | null
        AND?: RatingWhereInput[] | null
        OR?: RatingWhereInput[] | null
        NOT?: RatingWhereInput[] | null
    }

    export interface ArgsAuthor {
        where?: UserWhereInput | null
        orderBy?: UserOrderByInput | null
        skip?: number | null
        after?: string | null
        before?: string | null
        first?: number | null
        last?: number | null
    }

    export type IdResolver =
        | ((
              parent: Rating,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Rating,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type VoteResolver =
        | ((
              parent: Rating,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => number | Promise<number>)
        | {
              fragment: string
              resolve: (
                  parent: Rating,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => number | Promise<number>
          }

    export type AuthorResolver =
        | ((
              parent: Rating,
              args: ArgsAuthor,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User[] | null | Promise<User[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: Rating,
                  args: ArgsAuthor,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>
          }

    export interface Type {
        id:
            | ((
                  parent: Rating,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Rating,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        vote:
            | ((
                  parent: Rating,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => number | Promise<number>)
            | {
                  fragment: string
                  resolve: (
                      parent: Rating,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => number | Promise<number>
              }

        author:
            | ((
                  parent: Rating,
                  args: ArgsAuthor,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User[] | null | Promise<User[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: Rating,
                      args: ArgsAuthor,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User[] | null | Promise<User[] | null>
              }
    }
}

export namespace MutationResolvers {
    export const defaultResolvers = {}

    export interface ArgsLogin {
        email: string
        password?: string | null
    }

    export interface ArgsRegister {
        email: string
        username: string
        password: string
    }

    export interface ArgsForgotPassword {
        email: string
    }

    export interface ArgsCheckToken {
        token: string
    }

    export interface ArgsResetPassword {
        id: string
        password: string
    }

    export interface ArgsAuthConfirmation {
        token: string
    }

    export type LoginResolver =
        | ((
              parent: undefined,
              args: ArgsLogin,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => LoginResponse | Promise<LoginResponse>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: ArgsLogin,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => LoginResponse | Promise<LoginResponse>
          }

    export type RegisterResolver =
        | ((
              parent: undefined,
              args: ArgsRegister,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => RegisterResponse | Promise<RegisterResponse>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: ArgsRegister,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => RegisterResponse | Promise<RegisterResponse>
          }

    export type ForgotPasswordResolver =
        | ((
              parent: undefined,
              args: ArgsForgotPassword,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: ArgsForgotPassword,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
          }

    export type CheckTokenResolver =
        | ((
              parent: undefined,
              args: ArgsCheckToken,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: ArgsCheckToken,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
          }

    export type ResetPasswordResolver =
        | ((
              parent: undefined,
              args: ArgsResetPassword,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: ArgsResetPassword,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
          }

    export type LogoutResolver =
        | ((
              parent: undefined,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type AuthConfirmationResolver =
        | ((
              parent: undefined,
              args: ArgsAuthConfirmation,
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
        | {
              fragment: string
              resolve: (
                  parent: undefined,
                  args: ArgsAuthConfirmation,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
          }

    export interface Type {
        login:
            | ((
                  parent: undefined,
                  args: ArgsLogin,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => LoginResponse | Promise<LoginResponse>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: ArgsLogin,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => LoginResponse | Promise<LoginResponse>
              }

        register:
            | ((
                  parent: undefined,
                  args: ArgsRegister,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => RegisterResponse | Promise<RegisterResponse>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: ArgsRegister,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => RegisterResponse | Promise<RegisterResponse>
              }

        forgotPassword:
            | ((
                  parent: undefined,
                  args: ArgsForgotPassword,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: ArgsForgotPassword,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
              }

        checkToken:
            | ((
                  parent: undefined,
                  args: ArgsCheckToken,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: ArgsCheckToken,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
              }

        resetPassword:
            | ((
                  parent: undefined,
                  args: ArgsResetPassword,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: ArgsResetPassword,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
              }

        logout:
            | ((
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        authConfirmation:
            | ((
                  parent: undefined,
                  args: ArgsAuthConfirmation,
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>)
            | {
                  fragment: string
                  resolve: (
                      parent: undefined,
                      args: ArgsAuthConfirmation,
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => ForgotPasswordResponse | Promise<ForgotPasswordResponse>
              }
    }
}

export namespace LoginResponseResolvers {
    export const defaultResolvers = {
        ok: (parent: LoginResponse) => parent.ok,
        token: (parent: LoginResponse) =>
            parent.token === undefined ? null : parent.token,
        refreshToken: (parent: LoginResponse) => parent.refreshToken,
    }

    export type OkResolver =
        | ((
              parent: LoginResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type TokenResolver =
        | ((
              parent: LoginResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>)
        | {
              fragment: string
              resolve: (
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>
          }

    export type RefreshTokenResolver =
        | ((
              parent: LoginResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type UserResolver =
        | ((
              parent: LoginResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>)
        | {
              fragment: string
              resolve: (
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>
          }

    export interface Type {
        ok:
            | ((
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: LoginResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        token:
            | ((
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: LoginResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | null | Promise<string | null>
              }

        refreshToken:
            | ((
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: LoginResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        user:
            | ((
                  parent: LoginResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => User | null | Promise<User | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: LoginResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => User | null | Promise<User | null>
              }
    }
}

export namespace RegisterResponseResolvers {
    export const defaultResolvers = {
        ok: (parent: RegisterResponse) => parent.ok,
        result: (parent: RegisterResponse) => parent.result,
    }

    export type OkResolver =
        | ((
              parent: RegisterResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: RegisterResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type ResultResolver =
        | ((
              parent: RegisterResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: RegisterResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export interface Type {
        ok:
            | ((
                  parent: RegisterResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: RegisterResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        result:
            | ((
                  parent: RegisterResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: RegisterResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }
    }
}

export namespace ForgotPasswordResponseResolvers {
    export const defaultResolvers = {
        ok: (parent: ForgotPasswordResponse) => parent.ok,
        result: (parent: ForgotPasswordResponse) => parent.result,
    }

    export type OkResolver =
        | ((
              parent: ForgotPasswordResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>)
        | {
              fragment: string
              resolve: (
                  parent: ForgotPasswordResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>
          }

    export type ResultResolver =
        | ((
              parent: ForgotPasswordResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: ForgotPasswordResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export interface Type {
        ok:
            | ((
                  parent: ForgotPasswordResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | Promise<boolean>)
            | {
                  fragment: string
                  resolve: (
                      parent: ForgotPasswordResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | Promise<boolean>
              }

        result:
            | ((
                  parent: ForgotPasswordResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: ForgotPasswordResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }
    }
}

export namespace ErrorResolvers {
    export const defaultResolvers = {
        path: (parent: Error) => parent.path,
        message: (parent: Error) => parent.message,
    }

    export type PathResolver =
        | ((
              parent: Error,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Error,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export type MessageResolver =
        | ((
              parent: Error,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => string | Promise<string>)
        | {
              fragment: string
              resolve: (
                  parent: Error,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>
          }

    export interface Type {
        path:
            | ((
                  parent: Error,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Error,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }

        message:
            | ((
                  parent: Error,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => string | Promise<string>)
            | {
                  fragment: string
                  resolve: (
                      parent: Error,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => string | Promise<string>
              }
    }
}

export namespace VoidResponseResolvers {
    export const defaultResolvers = {
        ok: (parent: VoidResponse) =>
            parent.ok === undefined ? null : parent.ok,
    }

    export type OkResolver =
        | ((
              parent: VoidResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => boolean | null | Promise<boolean | null>)
        | {
              fragment: string
              resolve: (
                  parent: VoidResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | null | Promise<boolean | null>
          }

    export type ErrorsResolver =
        | ((
              parent: VoidResponse,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo,
          ) => Error[] | null | Promise<Error[] | null>)
        | {
              fragment: string
              resolve: (
                  parent: VoidResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Error[] | null | Promise<Error[] | null>
          }

    export interface Type {
        ok:
            | ((
                  parent: VoidResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => boolean | null | Promise<boolean | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: VoidResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => boolean | null | Promise<boolean | null>
              }

        errors:
            | ((
                  parent: VoidResponse,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo,
              ) => Error[] | null | Promise<Error[] | null>)
            | {
                  fragment: string
                  resolve: (
                      parent: VoidResponse,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo,
                  ) => Error[] | null | Promise<Error[] | null>
              }
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type
    MyUser: MyUserResolvers.Type
    Notification: NotificationResolvers.Type
    Comment: CommentResolvers.Type
    User: UserResolvers.Type
    File: FileResolvers.Type
    Team: TeamResolvers.Type
    Channel: ChannelResolvers.Type
    Message: MessageResolvers.Type
    Rating: RatingResolvers.Type
    Mutation: MutationResolvers.Type
    LoginResponse: LoginResponseResolvers.Type
    RegisterResponse: RegisterResponseResolvers.Type
    ForgotPasswordResponse: ForgotPasswordResponseResolvers.Type
    Error: ErrorResolvers.Type
    VoidResponse: VoidResponseResolvers.Type
}

// @ts-ignore
declare module 'graphql-tools' {
    interface IResolvers extends Resolvers {}
}
